swagger: "2.0"
info:
  description: "Maantrack."
  version: "1.0.0"
  title: "Maantrack"
  termsOfService: ""
  contact:
    email: "pravinrahanagdale41@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/"
tags:
  - name: "Maantrack"
    description: "Simple task tracking application"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"

  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  maantrack_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    required:
      - "username"
    properties:
      usersId:
        type: "integer"
        format: "int64"
      avatarUrl:
        type: "string"
      avatarSource:
        type: "string"
      bio:
        type: "string"
      confirmed:
        type: "string"
      email:
        type: "string"
      firsName:
        type: "string"
      lastName:
        type: "string"
      memberType:
        type: "string"
      profileUrl:
        type: "string"
      password:
        type: "string"
      username:
        type: "string"
      birthdate:
        type: "string"
        format: "date-time"
      boardIds:
        type: "array"
        items:
          type: "integer"
      organizationIds:
        type: "array"
        items:
          type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "User"
  Organization:
    type: "object"
    properties:
      organizationId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      displayName:
        type: "string"
      name:
        type: "string"
      organizationUrl:
        type: "string"
      website:
        type: "string"
      boardIds:
        type: "array"
        items:
          type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Organization"
  Board:
    type: "object"
    properties:
      boardId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      closed:
        type: "boolean"
      organizationId:
        type: "integer"
      pinned:
        type: "boolean"
      boardUrl:
        type: "string"
      starred:
        type: "boolean"
      userIds:
        type: "array"
        items:
          type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Board"
  List:
    type: "object"
    properties:
      listId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      closed:
        type: "boolean"
      boardId:
        type: "integer"
      pos:
        type: "integer"
        format: "int64"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "List"
  Card:
    type: "object"
    properties:
      cardId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      closed:
        type: "boolean"
      due:
        type: "string"
        format: "date-time"
      dueCompleted:
        type: "boolean"
      boardId:
        type: "integer"
      listId:
        type: "integer"
      name:
        type: "string"
      pos:
        type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifieDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Card"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"