swagger: "2.0"
info:
  description: "Maantrack."
  version: "1.0.0"
  title: "Maantrack"
  termsOfService: ""
  contact:
    email: "pravinrahanagdale41@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

basePath: "/"
tags:
  - name: "Maantrack"
    description: "Simple task tracking application"
  - name: "user"
    description: "Operations about user"

schemes:
  - "http"
  - "https"

paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/UserRequest"
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
        - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserById"
      security:
        - api_key: []
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "The user id that needs to be fetched. Use 1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      security:
        - api_key: []
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "The user id that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /board:
    post:
      security:
        - api_key: []
      tags:
        - "board"
      summary: "Create board"
      description: "This can only be done by the logged in user."
      operationId: "createBoard"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created board object"
          required: true
          schema:
            $ref: "#/definitions/BoardRequest"
      responses:
        default:
          description: "successful operation"
  /board/{boardId}:
    get:
      tags:
        - "board"
      summary: "Get Board by board id"
      description: ""
      operationId: "getBoardById"
      security:
        - api_key: []
      produces:
        - "application/json"
      parameters:
        - name: "boardId"
          in: "path"
          description: "The board id that needs to be fetched. Use 1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Board"
        404:
          description: "Board not found"
    delete:
      security:
        - api_key: []
      tags:
        - "board"
      summary: "Delete board"
      description: "This can only be done by the logged in user."
      operationId: "deleteBoard"
      produces:
        - "application/json"
      parameters:
        - name: "boardId"
          in: "path"
          description: "The board id that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Board"
        404:
          description: "Board not found"
  /list:
    post:
      security:
        - api_key: []
      tags:
        - "list"
      summary: "Create list"
      description: "This can only be done by the logged in user."
      operationId: "createList"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created list object"
          required: true
          schema:
            $ref: "#/definitions/ListRequest"
      responses:
        default:
          description: "successful operation"
  /list/{listId}:
    get:
      tags:
        - "list"
      summary: "Get List by list id"
      description: ""
      operationId: "getListById"
      security:
        - api_key: []
      produces:
        - "application/json"
      parameters:
        - name: "listId"
          in: "path"
          description: "The list id that needs to be fetched. Use 1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/List"
        404:
          description: "List not found"
    delete:
      security:
        - api_key: []
      tags:
        - "list"
      summary: "Delete list"
      description: "This can only be done by the logged in user."
      operationId: "deleteList"
      produces:
        - "application/json"
      parameters:
        - name: "listId"
          in: "path"
          description: "The list id that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/List"
        404:
          description: "List not found"
  /card:
    post:
      security:
        - api_key: []
      tags:
        - "card"
      summary: "Create card"
      description: "This can only be done by the logged in user."
      operationId: "createCard"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created card object"
          required: true
          schema:
            $ref: "#/definitions/CardRequest"
      responses:
        default:
          description: "successful operation"
  /card/{cardId}:
    get:
      tags:
        - "card"
      summary: "Get Card by card id"
      description: ""
      operationId: "getCardById"
      security:
        - api_key: []
      produces:
        - "application/json"
      parameters:
        - name: "cardId"
          in: "path"
          description: "The card id that needs to be fetched. Use 1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Card"
        404:
          description: "Card not found"
    delete:
      security:
        - api_key: []
      tags:
        - "card"
      summary: "Delete card"
      description: "This can only be done by the logged in user."
      operationId: "deleteCard"
      produces:
        - "application/json"
      parameters:
        - name: "cardId"
          in: "path"
          description: "The card id that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Card"
        404:
          description: "Card not found"
  /auth/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: '#/definitions/UserCredential'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
securityDefinitions:
  api_key:
    type: "apiKey"
    in: "header"
    name: "authorization"
definitions:
  UserCredential:
    type: "object"
    required:
      - "userName"
      - "password"
    properties:
      userName:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserCredential"
  User:
    type: "object"
    required:
      - "username"
    properties:
      usersId:
        type: "integer"
        format: "int64"
      avatarUrl:
        type: "string"
      avatarSource:
        type: "string"
      bio:
        type: "string"
      confirmed:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      userType:
        type: "string"
        enum: [User, Administrator]
      profileUrl:
        type: "string"
      password:
        type: "string"
      userName:
        type: "string"
      birthDate:
        type: "string"
        format: "date-time"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "User"
  UserRequest:
    type: "object"
    required:
      - "userName"
      - "email"
      - "firstName"
      - "lastName"
      - "userType"
      - "password"
      - "birthDate"
    properties:
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      userType:
        type: "string"
        enum: [User, Administrator]
      password:
        type: "string"
      userName:
        type: "string"
      birthDate:
        type: "string"
        format: "date-time"
    xml:
      name: "UserRequest"
  Organization:
    type: "object"
    properties:
      organizationId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      displayName:
        type: "string"
      name:
        type: "string"
      organizationUrl:
        type: "string"
      website:
        type: "string"
      boardIds:
        type: "array"
        items:
          type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Organization"
  Board:
    type: "object"
    properties:
      boardId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      closed:
        type: "boolean"
      organizationId:
        type: "integer"
      pinned:
        type: "boolean"
      boardUrl:
        type: "string"
      starred:
        type: "boolean"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Board"
  BoardRequest:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      closed:
        type: "boolean"
      pinned:
        type: "boolean"
      boardUrl:
        type: "string"
      starred:
        type: "boolean"
    xml:
      name: "Board"
  List:
    type: "object"
    properties:
      listId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      closed:
        type: "boolean"
      boardId:
        type: "integer"
      pos:
        type: "integer"
        format: "int64"
      createdDate:
        type: "string"
        format: "date-time"
      modifiedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "List"
  ListRequest:
    type: "object"
    properties:
      name:
        type: "string"
      closed:
        type: "boolean"
      boardId:
        type: "integer"
      pos:
        type: "integer"
        format: "int64"
    xml:
      name: "List"
  Card:
    type: "object"
    properties:
      cardId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      closed:
        type: "boolean"
      due:
        type: "string"
        format: "date-time"
      dueCompleted:
        type: "boolean"
      boardId:
        type: "integer"
      listId:
        type: "integer"
      name:
        type: "string"
      pos:
        type: "integer"
      createdDate:
        type: "string"
        format: "date-time"
      modifieDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Card"
  CardRequest:
    type: "object"
    properties:
      description:
        type: "string"
      closed:
        type: "boolean"
      due:
        type: "string"
        format: "date-time"
      dueCompleted:
        type: "boolean"
      boardId:
        type: "integer"
      listId:
        type: "integer"
      name:
        type: "string"
      pos:
        type: "integer"
    xml:
      name: "CardRequest"
